AWSTemplateFormatVersion: '2010-09-09'
Description: Identity Admin API
Parameters:
  Name:
    Description: The name given to the autoscaling group
    Type: String
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Stage:
    Description: Environment name
    Type: String
    AllowedValues:
    - CODE
    - PROD
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hs1.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MaxInstances:
    Description: Maximum number of instances. This should be (at least) double the
      desired capacity.
    Type: Number
    Default: 2
  MinInstances:
    Description: Minimum number of instances
    Type: Number
    Default: 1
  VpcId:
    Description: ID of the VPC onto which to launch the application
    Type: AWS::EC2::VPC::Id
  VpcSubNetCIDR:
    Description: CIDR of VPC subnet
    Type: String
  DepartmentSubnetCIDR:
    Description: CIDR of department subnet
    Type: String
  SshAccessSecurityGroup:
    Description: Security group that is allowed SSH access to the instances
    Type: AWS::EC2::SecurityGroup::Id
  VulnerabilityScanningSecurityGroup:
    Description: Security group that grants access to the account's Vulnerability
      Scanner
    Type: AWS::EC2::SecurityGroup::Id
  PrivateVpcSubnets:
    Description: Private subnets to use in VPC
    Type: List<AWS::EC2::Subnet::Id>
  LogstashHost:
    Description: Logstash load balancer host
    Type: String
  AMI:
    Description: Custom AMI to use for instances, created Amigo
    Type: String
  AlarmEmailAddress:
    Description: Contact email for alarms
    Type: String
  Stack:
    Description: Application stack
    Type: String
    Default: identity
  App:
    Description: Application name
    Type: String
    Default: identity-admin-api
  LoadBalancerLogsS3Bucket:
    Description: S3 Bucket to write ELB logs to
    Type: String
  Port:
    Description: Port that the app listens on
    Type: Number
    Default: 9500
  RDSSecurityGroup:
    Description: Security group contains the RDS instance to connect to
    Type: AWS::EC2::SecurityGroup::Id
Mappings:
  StageVariables:
    PROD:
      AutoscalingNotificationsARN: arn:aws:sns:eu-west-1:942464564246:AutoscalingNotificationsPROD
      LatencyAlarmThreshold: 0.5
      LatencyAlarmPeriod: 60
      NotificationAlarmPeriod: 1200
    CODE:
      AutoscalingNotificationsARN: arn:aws:sns:eu-west-1:942464564246:AutoscalingNotificationsCODE
      LatencyAlarmThreshold: 5
      LatencyAlarmPeriod: 1200
      NotificationAlarmPeriod: 1200
  CertsMap:
    CODE:
      ssl: certificate/4a66464e-3a22-41e8-b1d2-85279cd290d3
    PROD:
      ssl: certificate/db34d5fa-95af-4674-ad9b-189a52bb37e2
  SNSMap:
    CODE:
      emailValidationChangedTopic: arn:aws:sns:eu-west-1:942464564246:CODE-TopicEmailValidationChanged
      displayNameChangedTopic: arn:aws:sns:eu-west-1:942464564246:CODE-TopicDisplayNameChanged
    PROD:
      emailValidationChangedTopic: arn:aws:sns:eu-west-1:942464564246:PROD-TopicEmailValidationChanged
      displayNameChangedTopic: arn:aws:sns:eu-west-1:942464564246:PROD-TopicDisplayNameChanged
Resources:
  IdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
            - !Sub arn:aws:s3:::identity-artifacts/${Stage}/${App}/*
            - !Sub arn:aws:s3:::identity-private-config/${Stage}/${App}/*
            - arn:aws:s3:::github-public-keys/*
          - Effect: Allow
            Action: s3:ListBucket
            Resource: arn:aws:s3:::github-public-keys
          - Effect: Allow
            Action: ec2:Describe*
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudwatch:*
            - logs:*
            Resource: '*'
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !FindInMap [SNSMap, !Ref 'Stage', emailValidationChangedTopic]
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !FindInMap [SNSMap, !Ref 'Stage', displayNameChangedTopic]
          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:ListQueues
            - sqs:GetQueueUrl
            Resource: '*'
          - Effect: Allow
            Action: ses:SendEmail
            Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'IdentityRole'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      Listeners:
      - LoadBalancerPort: '443'
        InstancePort: !Ref Port
        Protocol: HTTPS
        SSLCertificateId: !Join [':', ['arn:aws:acm:eu-west-1', !Ref 'AWS::AccountId',
            !FindInMap [CertsMap, !Ref 'Stage', ssl]]]
      CrossZone: 'true'
      HealthCheck:
        Target: !Sub HTTP:${Port}/healthcheck
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '30'
        Timeout: '10'
      Subnets: !Ref 'PrivateVpcSubnets'
      SecurityGroups:
      - !Ref 'LoadBalancerSecurityGroup'
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: !Ref 'LoadBalancerLogsS3Bucket'
        S3BucketPrefix: !Join [/, [ELBLogs, !Ref 'Stack', !Ref 'App', !Ref 'Stage']]
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
      Tags:
      - Key: Stage
        Value: !Ref 'Stage'
      - Key: Stack
        Value: !Ref 'Stack'
      - Key: App
        Value: !Ref 'App'
  TopicSendEmail:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SendEmailTopic
      Subscription:
      - Endpoint: !Ref 'AlarmEmailAddress'
        Protocol: email
  TopicPagerDutyAlerts:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: PagerDutyTopic
      Subscription:
      - Endpoint: https://events.pagerduty.com/adapter/cloudwatch_sns/v1/96fdc0179acb4c5db3e059d775ea6a9e
        Protocol: https
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: !Ref 'MinInstances'
      MaxSize: !Ref 'MaxInstances'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 400
      LoadBalancerNames:
      - !Ref 'LoadBalancer'
      Tags:
      - Key: Stage
        Value: !Ref 'Stage'
        PropagateAtLaunch: 'true'
      - Key: LogstashHost
        Value: !Ref 'LogstashHost'
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: !Join [':', [!Ref 'Stage', !Ref 'App']]
        PropagateAtLaunch: 'true'
      - Key: Stack
        Value: !Ref 'Stack'
        PropagateAtLaunch: 'true'
      - Key: App
        Value: !Ref 'App'
        PropagateAtLaunch: 'true'
      NotificationConfiguration:
        TopicARN: !Ref 'TopicSendEmail'
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      VPCZoneIdentifier: !Ref 'PrivateVpcSubnets'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'AMI'
      SecurityGroups:
      - !Ref 'InstanceSecurityGroup'
      - !Ref 'VulnerabilityScanningSecurityGroup'
      - !Ref 'SshAccessSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      AssociatePublicIpAddress: 'False'
      IamInstanceProfile: !Ref 'InstanceProfile'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ev

            mkdir /etc/gu
            cat > /etc/gu/install_vars <<__END__
            STAGE=${Stage}
            app=${App}
            region=${AWS::Region}
            __END__

            #Add User
            addgroup ${Stack}
            adduser --home /${App} --disabled-password --gecos \"\" ${App}

            # Download, extract and chown
            aws s3 cp s3://identity-artifacts/${Stage}/${App}/${App}.zip /${App}
            aws s3 cp s3://identity-private-config/${Stage}/${App}/${App}.conf /etc/gu/${App}.conf
            unzip -o /${App}/${App}.zip -d /${App}
            cp /${App}/${App}/deploy/${App}.service /etc/systemd/system/${App}.service
            chown -R ${App} /${App}

            # Files limit
            cat > /etc/security/limits.d/nofile.conf <<__END__
            * soft nofile 20000
            * hard nofile 20000
            __END__
            chown root:root /etc/security/limits.d/nofile.conf

            # systemd stuff
            total_mem=$(grep MemTotal /proc/meminfo | awk '{ print $2 }')
            heap_size_in_mb=$(python -c "print int($total_mem * 0.8 / 1024)")

            sed -i "s/<APP>/${App}/g" /etc/systemd/system/${App}.service
            sed -i "s/<STAGE>/${Stage}/g" /etc/systemd/system/${App}.service
            sed -i "s/<PORT>/${Port}/g" /etc/systemd/system/${App}.service
            sed -i "s/<HEAP_SIZE_IN_MB>/$heap_size_in_mb/g" /etc/systemd/system/${App}.service

            instanceid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            cat > /etc/logstash.conf <<__END__
            input {
                stdin { }
                file {
                    add_field => {
                        'application' => '${App}'
                        'stage' => '${Stage}'
                        'ec2_instance' => '$instanceid'
                    }
                    path => "/${App}/logs/${App}-app.log"
                    type => "app"
                    start_position => "beginning"
                }
                file {
                    add_field => {
                        'application' => '${App}'
                        'stage' => '${Stage}'
                        'ec2_instance' => '$instanceid'
                    }
                    path => "/${App}/logs/${App}-access.log"
                    type => "access"
                    start_position => "beginning"
                }
            }
            output {
                stdout { }
                tcp {
                    host => "${LogstashHost}"
                    port => 6379
                    codec => json_lines
                }
            }
            filter {
                multiline {
                    type => "app"
                    pattern => "^\s"
                    what => "previous"
                  }
                grok {
                    type => "app"
                    match => { "message" => "%{TIMESTAMP_ISO8601:log_time_stamp} (?<thread>[^\s]+) %{LOGLEVEL:level} %{GREEDYDATA:message}" }
                    overwrite => [ "message" ]
                }
                grok {
                    type => "access"
                    match => { "message" => "%{TIMESTAMP_ISO8601:log_time_stamp} %{WORD:method} %{URIPATH:request_path}(?:%{URIPARAM:request_param})? %{WORD} %{WORD} %{INT:request_duration:int} %{WORD}" }
                  }
                date {
                    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss,SSS" ]
                }
            }
            __END__

            systemctl start logstash

            systemctl start ${App}

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Open up HTTP access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref 'VpcSubNetCIDR'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: !Ref Port
        ToPort: !Ref Port
        CidrIp: !Ref 'VpcSubNetCIDR'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Open up HTTP access to load balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref Port
        ToPort: !Ref Port
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: !Ref Port
        ToPort: !Ref Port
        CidrIp: !Ref 'VpcSubNetCIDR'
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        DestinationSecurityGroupId: !Ref 'RDSSecurityGroup'

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Join [' ', [Scale-Up if latency is greater than, !FindInMap [
            StageVariables, !Ref 'Stage', LatencyAlarmThreshold], seconds over last,
          !FindInMap [StageVariables, !Ref 'Stage', LatencyAlarmPeriod], seconds]]
      Namespace: AWS/ELB
      MetricName: Latency
      Statistic: Average
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
      - Name: LoadBalancer
        Value: !Ref 'LoadBalancer'
      Threshold: !FindInMap [StageVariables, !Ref 'Stage', LatencyAlarmThreshold]
      Period: !FindInMap [StageVariables, !Ref 'Stage', LatencyAlarmPeriod]
      EvaluationPeriods: '1'
      AlarmActions:
      - !Ref 'ScaleUpPolicy'
      OKActions:
      - !Ref 'ScaleDownPolicy'
  InsufficientHealthyHostsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      AlarmDescription: There are insufficient healthy hosts
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: '1'
      MetricName: HealthyHostCount
      Namespace: AWS/ELB
      Period: '60'
      Statistic: Average
      Threshold: !Ref 'MinInstances'
      AlarmActions:
      - !Ref 'TopicPagerDutyAlerts'
      InsufficientDataActions:
      - !Ref 'TopicPagerDutyAlerts'
      OKActions:
      - !Ref 'TopicPagerDutyAlerts'
      Dimensions:
      - Name: LoadBalancerName
        Value: !Ref 'LoadBalancer'
  MongoDBConnectionUnhealthyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: 'true'
      AlarmDescription: identity-admin-api cannot communicate with mongo
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: '1'
      MetricName: MongoConnectivity
      Namespace: identity-admin-api
      Period: '300'
      Statistic: Average
      Threshold: '0.9'
      AlarmActions:
      - !Ref 'TopicPagerDutyAlerts'
      OKActions:
      - !Ref 'TopicPagerDutyAlerts'
      Dimensions:
      - Name: Stage
        Value: !Ref 'Stage'
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'AutoscalingGroup'
      AdjustmentType: PercentChangeInCapacity
      ScalingAdjustment: '100'
      Cooldown: '300'
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AutoscalingGroup'
      Cooldown: '3600'
      ScalingAdjustment: '-1'
Outputs:
  LoadBalancer:
    Value: !GetAtt [LoadBalancer, DNSName]
